<resources>
    <string name="app_name">Android Vulkan Memory Model Testing</string>

    <string name="nav_drawer_open">Open Navigation Drawer</string>
    <string name="nav_drawer_close">Close Navigation Drawer</string>

    <string name="conformance_test_note">Note: Currently, the conformance testing is under construction, meaning a failed test result doesn\'t necessarily mean an implementation bug. Thank you for patience while we develop this tool.</string>
    
    <string name="litmustest_description">This app uses litmus tests to showcase the allowed behaviors of Vulkan memory model. This app is required to be run on devices with Android 8.0+, and GPU that supports Vulkan 1.1.</string>
    <string name="multi_tests_description">This page lets users to run multiple litmus tests with specific parameters at once. The test results will be displayed under the \'Start\' button once all tests have finished running.</string>
    <string name="conformance_test_description">This page is used to evaluate the performance of a set of tuned parameters on uncovering potential violations of Vulkan memory consistency model. There will be two methods of running weak memory tests: running with single memory location and running with barriers between instructions. There will also be two methods of running coherence tests: running with single memory location and running with RMW instruction. A weak behavior on any test represents a violation of Vulkan memory consistency model.</string>

    <string name="message_passing_description">The message passing litmus test checks to see if two stores in one thread can be re-ordered according to loads on a second thread.</string>
    <string name="store_description">The store litmus test checks to see if two stores in one thread can be re-ordered according to a store and a load on a second thread.</string>
    <string name="read_description">The read litmus test checks to see if two stores in one thread can be re-ordered according to a store and a load on a second thread.</string>
    <string name="load_buffer_description">The load buffer litmus test checks to see if loads can be buffered and re-ordered on different threads.</string>
    <string name="store_buffer_description">The store buffer litmus test checks to see if stores can be buffered and re-ordered on different threads.</string>
    <string name="write_22_description">The 2+2 write litmus test checks to see if two stores in two threads can both be re-ordered.</string>

    <string name="corr_description">The CoRR litmus test checks SC-per-location by ensuring subsequent reads of the same value cannot be re-ordered.</string>
    <string name="coww_description">The CoWW litmus test checks SC-per-location by ensuring two writes to the same address on the same thread cannot be re-ordered.</string>
    <string name="cowr_description">The CoWR litmus test checks SC-per-location by ensuring that if a read observes a write from another thread, any prior writes to the same address are not re-ordered beyond the read.</string>
    <string name="corw1_description">The CoRW1 litmus test checks SC-per-location by ensuring a read and a write to the same address cannot be re-ordered on one thread.</string>
    <string name="corw2_description">The CoRW2 litmus test checks SC-per-location by ensuring that if a write from one thread is visible to a read on another thread, any subsequent writes are not re-ordered</string>

    <string name="atomicity_description">The atomicity litmus test checks to see if a read-modify-write instruction is atomic. One thread in one workgroup performs an atomic rmw, while one thread in a second workgroup performs an atomic write. If the read part of the rmw does not observe the write by the other thread, then the value in memory after the test finishes must be the write by the thread in the second workgroup.</string>
    <string name="barrier_store_load_description">The barrier store load test checks to see if Vulkan barriers correctly synchronize a store before the barrier on one thread and a load on another thread after the barrier.</string>
    <string name="barrier_load_store_description">The barrier load store test checks to see if Vulkan barriers correctly synchronize a load before the barrier on one thread and a store on another thread after the barrier.</string>
    <string name="barrier_store_store_description">The barrier store store test checks to see if Vulkan barriers correctly synchronize a store before the barrier on one thread and a store on another thread after the barrier.</string>

    <string name="message_passing_result_name">Message Passing</string>
    <string name="store_result_name">Store</string>
    <string name="read_result_name">Read</string>
    <string name="load_buffer_result_name">Load Buffer</string>
    <string name="store_buffer_result_name">Store Buffer</string>
    <string name="write_22_result_name">2+2 Write</string>

    <string name="corr_result_name">CoRR</string>
    <string name="coww_result_name">CoWW</string>
    <string name="cowr_result_name">CoWR</string>
    <string name="corw1_result_name">CoRW1</string>
    <string name="corw2_result_name">CoRW2</string>

    <string name="atomicity_result_name">Atomicity</string>
    <string name="barrier_store_load_result_name">Barrier Store Load</string>
    <string name="barrier_load_store_result_name">Barrier Load Store</string>
    <string name="barrier_store_store_result_name">Barrier Store Store</string>

</resources>